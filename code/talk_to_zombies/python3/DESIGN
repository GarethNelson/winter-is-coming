server
   handles connections (duh)
   handles game session spawning
   each connection can have either a lobby state, ingame state or endgame state
   lobby state:
      can create or join a game session
   ingame state:
      is updated with events from ingame (game session sends events to the server object, server object adds to per-connection queue)
         gameover event skips other events
      can send shoot commands
      at gameover, enters endgame state
   endgame state:
      entered when game is over, all players are told who won (either a player or the zombie)
      can go back to lobby or disconnect
      if no command for 10 seconds, defaults to disconnect

game session
   uses coroutine to implement zombie
        every second, zombie moves to new location
   command queue for players
        server/protocol can add shoot commands to the queue

Commands
  Each command a class
  Invocation method
  Usage method

Protocol states
  LOBBY
  INGAME
  ENDGAME

Game states
  STARTGAME
  GAMEPLAY
  GAMEOVER

NetworkServer
  Listens for connections, starts up coroutine to run ProtocolHandler for each client

ProtocolHandler
  Receives lines from clients, interprets and dispatches to the appropriate state

MessageDispatcher
  Dispatches messages to a group of objects

Game session
  Handles routing messages to ingame entities (via MessageDispatcher)
  Handles game state transitions (via GameState instance)

GameState
  FSM of game states

Zombie AI
  Subclass of ingame entity

Ingame entity
  Accepts messages via MessageReceiver interface

Player entity
  Subclass of ingame entity

